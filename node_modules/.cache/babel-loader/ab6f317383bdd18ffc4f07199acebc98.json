{"ast":null,"code":"var _jsxFileName = \"/Users/Bernardita/Desktop/Taller de integracio\\u0301n/T3/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport $ from 'jquery';\nimport { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\n$('#connect_button').on('click', function () {\n  socket.connect();\n  console.log('connect');\n  ReactDOM.render( /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 19\n    }\n  }, \"Connected\"), document.getElementById('connection'));\n});\n$('#disconnect_button').on('click', function () {\n  socket.disconnect();\n  console.log('disconect');\n  ReactDOM.render( /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 19\n    }\n  }, \"Disconnected\"), document.getElementById('connection'));\n});\n\nconst Stocks = ({}) => {\n  const [updates, setUpdates] = useState([]);\n  const [stocks, setStocks] = useState([]);\n  const [exchanges, setExchanges] = useState([]);\n  useEffect(() => {\n    socket.on('UPDATE', update => {\n      var date = new Date(update.time * 1000);\n      setUpdates(currentData => [...currentData, {\n        \"ticker\": update.ticker,\n        \"time\": date,\n        \"value\": update.value\n      }]);\n    });\n    socket.emit('STOCKS');\n    socket.on('STOCKS', data => {\n      setStocks(currentData => data);\n    });\n    socket.emit('EXCHANGES');\n    socket.on('EXCHANGES', data => {\n      setExchanges(currentData => data);\n    });\n  }, []);\n  var graphs = []; //console.log(stocks);\n  //stocks.forEach(element => graphs += element.ticker);\n\n  for (var empresa in stocks) {\n    var elem = stocks[empresa]; //console.log(elem);\n\n    var prices = updates.filter(update => update.ticker === elem.ticker);\n    var valores_totales = prices.map(function (p) {\n      return p.value;\n    }); //console.log(elem.ticker);\n\n    graphs.push( /*#__PURE__*/React.createElement(\"div\", {\n      id: elem.ticker,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 5\n      }\n    }, \"Empresa: \", elem.ticker), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 5\n      }\n    }, \"Moneda: \", elem.quote_base), /*#__PURE__*/React.createElement(LineChart, {\n      width: 500,\n      height: 300,\n      data: prices,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      label: elem.quote_base,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"value\",\n      stroke: \"#82ca9d\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }))));\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, \"Precio acciones\"), graphs);\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(Stocks, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 17\n  }\n}), document.getElementById('root')); // function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/Bernardita/Desktop/Taller de integracioÃÅn/T3/my-app/src/index.js"],"names":["React","ReactDOM","serviceWorker","Chart","io","$","useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","socket","path","on","connect","console","log","render","document","getElementById","disconnect","Stocks","updates","setUpdates","stocks","setStocks","exchanges","setExchanges","update","date","Date","time","currentData","ticker","value","emit","data","graphs","empresa","elem","prices","filter","valores_totales","map","p","push","quote_base","top","right","left","bottom","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport $ from 'jquery';\nimport { useEffect, useState } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\n\n\n\n$('#connect_button').on('click', function(){\n  socket.connect();\n  console.log('connect');\n  ReactDOM.render(<h2>Connected</h2>, document.getElementById('connection'));\n});\n\n$('#disconnect_button').on('click', function(){\n  socket.disconnect();\n  console.log('disconect');\n  ReactDOM.render(<h2>Disconnected</h2>, document.getElementById('connection'));\n});\n\nconst Stocks = ({}) => {\n  const [updates, setUpdates] = useState([]);\n  const [stocks, setStocks] = useState([]);\n  const [exchanges, setExchanges] = useState([]);\n\n  useEffect(() =>{\n    socket.on('UPDATE', update => {\n      var date = new Date(update.time*1000);\n      setUpdates(currentData => [...currentData, {\"ticker\": update.ticker, \"time\": date, \"value\": update.value }]);\n    });\n    socket.emit('STOCKS');\n    socket.on('STOCKS', data => {\n      setStocks(currentData => data);\n    });\n    socket.emit('EXCHANGES');\n    socket.on('EXCHANGES', data => {\n      setExchanges(currentData => data);\n    });\n  }, []);\n\n  var graphs = [];\n  //console.log(stocks);\n  //stocks.forEach(element => graphs += element.ticker);\n  for(var empresa in stocks)\n  {\n    var elem = stocks[empresa];\n    //console.log(elem);\n    var prices = updates.filter(update => update.ticker === elem.ticker);\n    var valores_totales = prices.map(function(p){ return p.value} );\n    //console.log(elem.ticker);\n    graphs.push(<div id={elem.ticker}>\n    <h2>Empresa: {elem.ticker}</h2>\n    <h3>Moneda: {elem.quote_base}</h3>\n    <LineChart\n      width={500}\n      height={300}\n      data={prices}\n      margin={{\n        top: 5, right: 30, left: 20, bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"time\" />\n      <YAxis label={elem.quote_base}/>\n      <Tooltip />\n      <Legend />\n      <Line type=\"monotone\" dataKey=\"value\" stroke=\"#82ca9d\" />\n    </LineChart>\n    </div>);\n  };\n  return(\n    <div>\n      <h1>Precio acciones</h1>\n      {graphs}\n    </div>\n  );\n};\n\nReactDOM.render(<Stocks />, document.getElementById('root'));\n\n\n\n// function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}