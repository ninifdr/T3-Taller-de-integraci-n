{"ast":null,"code":"var _jsxFileName = \"/Users/Bernardita/Desktop/Taller de integracio\\u0301n/T3/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport $ from 'jquery';\nimport { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\nvar prices = {};\n$('#connect_button').on('click', function () {\n  socket.connect();\n  console.log('connect');\n  ReactDOM.render( /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 19\n    }\n  }, \"Connected\"), document.getElementById('connection'));\n});\n$('#disconnect_button').on('click', function () {\n  socket.disconnect();\n  console.log('disconect');\n  ReactDOM.render( /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 19\n    }\n  }, \"Disconnected\"), document.getElementById('connection'));\n});\n\nconst Stocks = ({}) => {\n  const [stocks, setStocks] = useState([]);\n  useEffect(() => {\n    socket.on('UPDATE', update => {\n      setStocks(currentData => [...currentData, update]);\n      prices[update.ticker] = update.value;\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, \"Precio acciones\"), /*#__PURE__*/React.createElement(BarChart, {\n    width: 600,\n    height: 300,\n    data: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    stroke: \"#8884d8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    wrapperStyle: {\n      width: 100,\n      backgroundColor: '#ccc'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    width: 100,\n    wrapperStyle: {\n      top: 40,\n      right: 20,\n      backgroundColor: '#f5f5f5',\n      border: '1px solid #d5d5d5',\n      borderRadius: 3,\n      lineHeight: '40px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(CartesianGrid, {\n    stroke: \"#ccc\",\n    strokeDasharray: \"5 5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: \"uv\",\n    fill: \"#8884d8\",\n    barSize: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  })));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(Stocks, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 17\n  }\n}), document.getElementById('root')); // function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/Bernardita/Desktop/Taller de integracioÃÅn/T3/my-app/src/index.js"],"names":["React","ReactDOM","serviceWorker","Chart","io","$","useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","socket","path","prices","on","connect","console","log","render","document","getElementById","disconnect","Stocks","stocks","setStocks","update","currentData","ticker","value","data","width","backgroundColor","top","right","border","borderRadius","lineHeight","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport $ from 'jquery';\nimport { useEffect, useState } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\nvar prices = {};\n\n\n$('#connect_button').on('click', function(){\n  socket.connect();\n  console.log('connect');\n  ReactDOM.render(<h2>Connected</h2>, document.getElementById('connection'));\n});\n\n$('#disconnect_button').on('click', function(){\n  socket.disconnect();\n  console.log('disconect');\n  ReactDOM.render(<h2>Disconnected</h2>, document.getElementById('connection'));\n});\n\nconst Stocks = ({}) => {\n  const [stocks, setStocks] = useState([]);\n  useEffect(() =>{\n    socket.on('UPDATE', update => {\n      setStocks(currentData => [...currentData, update]);\n      prices[update.ticker] = update.value;\n    })\n  }, []);\n\n  return(\n    <div>\n      <h1>Precio acciones</h1>\n      <BarChart width={600} height={300} data={data}>\n    <XAxis dataKey=\"name\" stroke=\"#8884d8\" />\n    <YAxis />\n    <Tooltip wrapperStyle={{ width: 100, backgroundColor: '#ccc' }} />\n    <Legend width={100} wrapperStyle={{ top: 40, right: 20, backgroundColor: '#f5f5f5', border: '1px solid #d5d5d5', borderRadius: 3, lineHeight: '40px' }} />\n    <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n    <Bar dataKey=\"uv\" fill=\"#8884d8\" barSize={30} />\n  </BarChart>\n    </div>\n  );\n};\n\nReactDOM.render(<Stocks />, document.getElementById('root'));\n\n\n\n// function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}