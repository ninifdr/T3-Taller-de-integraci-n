{"ast":null,"code":"var _jsxFileName = \"/Users/Bernardita/Desktop/Taller de integracio\\u0301n/T3/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\n$('#connect_button').on('click', function () {\n  socket.connect();\n  ReactDOM.render( /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 19\n    }\n  }, \"Connected\"), document.getElementById('connection'));\n});\n$('#disconnect_button').on('click', function () {\n  socket.connect();\n  ReactDOM.render( /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 19\n    }\n  }, \"Disconnected\"), document.getElementById('connection'));\n});\n\nconst Stocks = ({}) => {\n  const [stocks, setStocks] = useState([]);\n  useEffect(() => {\n    socket.on('UPDATE', update => {\n      console.log(update);\n      setStocks(currentData => [...currentData, update]);\n      console.log(stocks);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, \"Real Time CPU Usage\"), /*#__PURE__*/React.createElement(LineChart, {\n    width: 500,\n    height: 300,\n    data: stocks,\n    margin: {\n      top: 5,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"value\",\n    stroke: \"#82ca9d\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  })));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(Stocks, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 17\n  }\n}), document.getElementById('root')); // function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/Bernardita/Desktop/Taller de integracioÃÅn/T3/my-app/src/index.js"],"names":["React","ReactDOM","serviceWorker","Chart","io","useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","socket","path","$","on","connect","render","document","getElementById","Stocks","stocks","setStocks","update","console","log","currentData","top","right","left","bottom","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport { useEffect, useState } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\n\n$('#connect_button').on('click', function(){\n  socket.connect();\n  ReactDOM.render(<h2>Connected</h2>, document.getElementById('connection'));\n});\n\n$('#disconnect_button').on('click', function(){\n  socket.connect();\n  ReactDOM.render(<h2>Disconnected</h2>, document.getElementById('connection'));\n});\n\nconst Stocks = ({}) => {\n  const [stocks, setStocks] = useState([]);\n  useEffect(() =>{\n    socket.on('UPDATE', update => {\n      console.log(update);\n      setStocks(currentData => [...currentData, update]);\n      console.log(stocks)\n    })\n  }, [])\n\n  return(\n    <div>\n      <h1>Real Time CPU Usage</h1>\n      <LineChart\n        width={500}\n        height={300}\n        data={stocks}\n        margin={{\n          top: 5, right: 30, left: 20, bottom: 5,\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"time\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"value\" stroke=\"#82ca9d\" />\n      </LineChart>\n    </div>\n  );\n};\n\nReactDOM.render(<Stocks />, document.getElementById('root'));\n\n\n\n// function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}