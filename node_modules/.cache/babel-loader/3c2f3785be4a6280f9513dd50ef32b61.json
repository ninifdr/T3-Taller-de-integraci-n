{"ast":null,"code":"var _jsxFileName = \"/Users/Bernardita/Desktop/Taller de integracio\\u0301n/T3/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nReactDOM.render( /*#__PURE__*/React.createElement(React.StrictMode, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }\n})), document.getElementById('root'));\n\nfunction tick() {\n  const element = /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      maxWidth: 900\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Chart, {\n    width: 400,\n    height: 300,\n    chartType: \"ColumnChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }, \"Loading Chart\"),\n    data: [['City', '2010 Population', '2000 Population'], ['New York City, NY', 8175000, 8008000], ['Los Angeles, CA', 3792000, 3694000], ['Chicago, IL', 2695000, 2896000], ['Houston, TX', 2099000, 1953000], ['Philadelphia, PA', 1526000, 1517000]],\n    options: {\n      title: 'Population of Largest U.S. Cities',\n      chartArea: {\n        width: '30%'\n      },\n      hAxis: {\n        title: 'Total Population',\n        minValue: 0\n      },\n      vAxis: {\n        title: 'City'\n      }\n    },\n    legendToggle: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 3\n    }\n  }), /*#__PURE__*/React.createElement(Chart, {\n    width: 400,\n    height: '300px',\n    chartType: \"AreaChart\",\n    loader: /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }\n    }, \"Loading Chart\"),\n    data: [['Year', 'Sales', 'Expenses'], ['2013', 1000, 400], ['2014', 1170, 460], ['2015', 660, 1120], ['2016', 1030, 540]],\n    options: {\n      title: 'Company Performance',\n      hAxis: {\n        title: 'Year',\n        titleTextStyle: {\n          color: '#333'\n        }\n      },\n      vAxis: {\n        minValue: 0\n      },\n      // For the legend to fit, we make the chart area smaller\n      chartArea: {\n        width: '50%',\n        height: '70%'\n      } // lineWidth: 25\n\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 3\n    }\n  }));\n  ReactDOM.render(element, document.getElementById('root'));\n}\n\ntick(); // If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/Bernardita/Desktop/Taller de integracioÃÅn/T3/my-app/src/index.js"],"names":["React","ReactDOM","App","serviceWorker","Chart","render","document","getElementById","tick","element","display","maxWidth","title","chartArea","width","hAxis","minValue","vAxis","titleTextStyle","color","height","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nfunction tick() {\n  const element = (\n    <div style={{ display: 'flex', maxWidth: 900 }}>\n  <Chart\n    width={400}\n    height={300}\n    chartType=\"ColumnChart\"\n    loader={<div>Loading Chart</div>}\n    data={[\n      ['City', '2010 Population', '2000 Population'],\n      ['New York City, NY', 8175000, 8008000],\n      ['Los Angeles, CA', 3792000, 3694000],\n      ['Chicago, IL', 2695000, 2896000],\n      ['Houston, TX', 2099000, 1953000],\n      ['Philadelphia, PA', 1526000, 1517000],\n    ]}\n    options={{\n      title: 'Population of Largest U.S. Cities',\n      chartArea: { width: '30%' },\n      hAxis: {\n        title: 'Total Population',\n        minValue: 0,\n      },\n      vAxis: {\n        title: 'City',\n      },\n    }}\n    legendToggle\n  />\n  <Chart\n    width={400}\n    height={'300px'}\n    chartType=\"AreaChart\"\n    loader={<div>Loading Chart</div>}\n    data={[\n      ['Year', 'Sales', 'Expenses'],\n      ['2013', 1000, 400],\n      ['2014', 1170, 460],\n      ['2015', 660, 1120],\n      ['2016', 1030, 540],\n    ]}\n    options={{\n      title: 'Company Performance',\n      hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n      vAxis: { minValue: 0 },\n      // For the legend to fit, we make the chart area smaller\n      chartArea: { width: '50%', height: '70%' },\n      // lineWidth: 25\n    }}\n  />\n</div>\n  );\n  ReactDOM.render(element, document.getElementById('root'));\n}\n\ntick();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}