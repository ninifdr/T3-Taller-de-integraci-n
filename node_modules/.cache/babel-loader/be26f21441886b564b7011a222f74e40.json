{"ast":null,"code":"var _jsxFileName = \"/Users/Bernardita/Desktop/Taller de integracio\\u0301n/T3/my-app/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport { useEffect, useState } from 'react';\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\n\nconst Stocks = ({}) => {\n  const [stocks, setStocks] = useState([]);\n  useEffect(() => {\n    socket.on('UPDATE', (ticker, value, time) => {\n      setStocks(currentData => [...currentData, value]);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, stocks);\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(Stocks, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 17\n  }\n}), document.getElementById('root')); // function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/Bernardita/Desktop/Taller de integración/T3/my-app/src/index.js"],"names":["React","ReactDOM","serviceWorker","Chart","io","useEffect","useState","socket","path","Stocks","stocks","setStocks","on","ticker","value","time","currentData","render","document","getElementById","unregister"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,MAAMC,MAAM,GAAGH,EAAE,CAAC,gCAAD,EAAmC;AAClDI,EAAAA,IAAI,EAAE;AAD4C,CAAnC,CAAjB;;AAIA,MAAMC,MAAM,GAAG,CAAC,EAAD,KAAQ;AACrB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,EAAD,CAApC;AACAD,EAAAA,SAAS,CAAC,MAAK;AACbE,IAAAA,MAAM,CAACK,EAAP,CAAU,QAAV,EAAoB,CAACC,MAAD,EAASC,KAAT,EAAgBC,IAAhB,KAAyB;AAC3CJ,MAAAA,SAAS,CAACK,WAAW,IAAI,CAAC,GAAGA,WAAJ,EAAiBF,KAAjB,CAAhB,CAAT;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT;AAOA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCJ,MADD,CADF;AAKD,CAdD;;AAgBAT,QAAQ,CAACgB,MAAT,eAAgB,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA4BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA5B,E,CAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACAjB,aAAa,CAACkB,UAAd","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport { useEffect, useState } from 'react';\n\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\n\nconst Stocks = ({}) => {\n  const [stocks, setStocks] = useState([]);\n  useEffect(() =>{\n    socket.on('UPDATE', (ticker, value, time) => {\n      setStocks(currentData => [...currentData, value]);\n    })\n  }, [])\n\n\n  return(\n    <div>\n    {stocks}\n</div>\n  );\n};\n\nReactDOM.render(<Stocks />, document.getElementById('root'));\n\n\n\n// function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}