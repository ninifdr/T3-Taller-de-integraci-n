{"ast":null,"code":"var _jsxFileName = \"/Users/Bernardita/Desktop/Taller de integracio\\u0301n/T3/T3-Taller-de-integraci-n/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport $ from 'jquery';\nimport { useEffect, useState } from 'react';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';\nimport { max, min } from 'mathjs';\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\nvar tickerdict = {};\n$('#connect_button').on('click', function () {\n  socket.connect();\n  console.log('connect');\n  ReactDOM.render( /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 19\n    }\n  }, \"Connected\"), document.getElementById('connection'));\n});\n$('#disconnect_button').on('click', function () {\n  socket.disconnect();\n  console.log('disconect');\n  ReactDOM.render( /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 19\n    }\n  }, \"Disconnected\"), document.getElementById('connection'));\n});\n\nconst Stocks = ({}) => {\n  const [updates, setUpdates] = useState([]);\n  const [stocks, setStocks] = useState([]);\n  const [exchanges, setExchanges] = useState([]);\n  const [buys, setBuys] = useState([]);\n  const [sells, setSells] = useState([]);\n  useEffect(() => {\n    // ESCUCHANDO\n    socket.on('UPDATE', update => {\n      var date = new Date(update.time * 1000);\n      setUpdates(currentData => [...currentData, {\n        \"ticker\": update.ticker,\n        \"time\": date,\n        \"value\": update.value\n      }]);\n    });\n    socket.on('BUY', buy => {\n      var date = new Date(buy.time * 1000);\n      setBuys(currentData => [...currentData, {\n        \"ticker\": buy.ticker,\n        \"time\": date,\n        \"volume\": buy.volume\n      }]);\n    });\n    socket.on('SELL', sell => {\n      var date = new Date(sell.time * 1000);\n      setSells(currentData => [...currentData, {\n        \"ticker\": sell.ticker,\n        \"time\": date,\n        \"volume\": sell.volume\n      }]);\n    }); //EMITO, LUEGO ESCUCHO\n\n    socket.emit('STOCKS');\n    socket.on('STOCKS', data => {\n      setStocks(currentData => data);\n\n      for (var d in data) {\n        tickerdict[data[d].company_name] = data[d].ticker;\n      } //console.log(tickerdict);\n\n    });\n    socket.emit('EXCHANGES');\n    socket.on('EXCHANGES', data => {\n      setExchanges(currentData => data);\n    });\n  }, []);\n  var table = [];\n  var volumen_total;\n\n  for (var ex in exchanges) {\n    var volumen_compra;\n    var volumen_venta;\n    var acciones = [];\n    var exchange = exchanges[ex]; //console.log(exchange);\n\n    acciones = exchange.listed_companies; //console.log(acciones);\n\n    for (var accion in acciones) {\n      console.log(tickerdict);\n      var ticker = tickerdict[accion];\n      console.log(ticker);\n      var buys_ticker = buys.filter(b => b.ticker === ticker); //console.log(buys_ticker);\n\n      var sells_ticker = sells.filter(s => s.ticker === ticker);\n      volumen_compra += buys_ticker.reduce(function (total, current) {\n        return total + current.volume;\n      }, 0); //console.log(volumen_compra);\n\n      volumen_venta += sells_ticker.reduce(function (total, current) {\n        return total + current.volume;\n      }, 0);\n    }\n\n    ;\n    volumen_total += volumen_compra + volumen_venta;\n  }\n\n  ;\n  var graphs = [];\n\n  for (var empresa in stocks) {\n    var elem = stocks[empresa]; //console.log(elem);\n\n    var maximo_historico;\n    var minimo_historico;\n    var ultimo_valor;\n    var penultimo_valor;\n    var var_porcentual;\n    var prices = updates.filter(update => update.ticker === elem.ticker);\n    var valores_totales = prices.map(function (p) {\n      return p.value;\n    });\n\n    if (valores_totales.length !== 0) {\n      maximo_historico = max(valores_totales);\n      minimo_historico = min(valores_totales);\n      ultimo_valor = valores_totales[valores_totales.length - 1];\n\n      if (valores_totales.length > 1) {\n        penultimo_valor = valores_totales[valores_totales.length - 2];\n        var_porcentual = ultimo_valor / penultimo_valor * 100;\n      }\n    } //console.log(elem.ticker);\n\n\n    graphs.push( /*#__PURE__*/React.createElement(\"div\", {\n      id: elem.company_name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 5\n      }\n    }, \"Empresa: \", elem.company_name), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 5\n      }\n    }, \"Moneda: \", elem.quote_base), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 5\n      }\n    }, \"Pa\\xEDs: \", elem.country), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 5\n      }\n    }, \"Valor m\\xE1ximo: \", maximo_historico), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 5\n      }\n    }, \"Valor m\\xEDnimo: \", minimo_historico), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 5\n      }\n    }, \"\\xDAltimo precio: \", ultimo_valor), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 5\n      }\n    }, \"Variaci\\xF3n porcentual: \", var_porcentual, \"%\"), /*#__PURE__*/React.createElement(LineChart, {\n      width: 500,\n      height: 300,\n      data: prices,\n      margin: {\n        top: 5,\n        right: 30,\n        left: 20,\n        bottom: 5\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(CartesianGrid, {\n      strokeDasharray: \"3 3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(XAxis, {\n      dataKey: \"time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(YAxis, {\n      label: elem.quote_base,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Legend, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Line, {\n      type: \"monotone\",\n      dataKey: \"value\",\n      label: \"Valor acci\\xF3n\",\n      stroke: \"#82ca9d\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }))));\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, \"Precio acciones\"), graphs);\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(Stocks, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 17\n  }\n}), document.getElementById('root')); // function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/Bernardita/Desktop/Taller de integración/T3/T3-Taller-de-integraci-n/src/index.js"],"names":["React","ReactDOM","serviceWorker","Chart","io","$","useEffect","useState","LineChart","Line","XAxis","YAxis","CartesianGrid","Tooltip","Legend","max","min","socket","path","tickerdict","on","connect","console","log","render","document","getElementById","disconnect","Stocks","updates","setUpdates","stocks","setStocks","exchanges","setExchanges","buys","setBuys","sells","setSells","update","date","Date","time","currentData","ticker","value","buy","volume","sell","emit","data","d","company_name","table","volumen_total","ex","volumen_compra","volumen_venta","acciones","exchange","listed_companies","accion","buys_ticker","filter","b","sells_ticker","s","reduce","total","current","graphs","empresa","elem","maximo_historico","minimo_historico","ultimo_valor","penultimo_valor","var_porcentual","prices","valores_totales","map","p","length","push","quote_base","country","top","right","left","bottom","unregister"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport Chart from \"react-google-charts\";\nimport io from 'socket.io-client';\nimport $ from 'jquery';\nimport { useEffect, useState } from 'react';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport {\n  max, min\n} from 'mathjs'\n\nconst socket = io('wss://le-18262636.bitzonte.com', {\n  path: '/stocks'\n});\n\nvar tickerdict = {};\n\n$('#connect_button').on('click', function(){\n  socket.connect();\n  console.log('connect');\n  ReactDOM.render(<h2>Connected</h2>, document.getElementById('connection'));\n});\n\n$('#disconnect_button').on('click', function(){\n  socket.disconnect();\n  console.log('disconect');\n  ReactDOM.render(<h2>Disconnected</h2>, document.getElementById('connection'));\n});\n\nconst Stocks = ({}) => {\n  const [updates, setUpdates] = useState([]);\n  const [stocks, setStocks] = useState([]);\n  const [exchanges, setExchanges] = useState([]);\n  const [buys, setBuys] = useState([]);\n  const [sells, setSells] = useState([]);\n\n  useEffect(() =>{\n    // ESCUCHANDO\n    socket.on('UPDATE', update => {\n      var date = new Date(update.time*1000);\n      setUpdates(currentData => [...currentData, {\"ticker\": update.ticker, \"time\": date, \"value\": update.value }]);\n    });\n    socket.on('BUY', buy =>{\n      var date = new Date(buy.time*1000);\n      setBuys(currentData => [...currentData, {\"ticker\": buy.ticker, \"time\": date, \"volume\": buy.volume }]);\n    })\n    socket.on('SELL', sell =>{\n      var date = new Date(sell.time*1000);\n      setSells(currentData => [...currentData, {\"ticker\": sell.ticker, \"time\": date, \"volume\": sell.volume }]);\n    })\n    //EMITO, LUEGO ESCUCHO\n    socket.emit('STOCKS');\n    socket.on('STOCKS', data => {\n      setStocks(currentData => data);\n      for(var d in data)\n      {\n        tickerdict[data[d].company_name] = data[d].ticker;\n      }\n      //console.log(tickerdict);\n    });\n    socket.emit('EXCHANGES');\n    socket.on('EXCHANGES', data => {\n      setExchanges(currentData => data);\n    });\n  }, []);\n\n  var table = [];\n  var volumen_total;\n\n  for(var ex in exchanges)\n  {\n    var volumen_compra;\n    var volumen_venta;\n    var acciones = [];\n    var exchange = exchanges[ex];\n    //console.log(exchange);\n    acciones = exchange.listed_companies;\n    //console.log(acciones);\n    for(var accion in acciones)\n    {\n      console.log(tickerdict);\n      var ticker = tickerdict[accion];\n      console.log(ticker);\n      var buys_ticker = buys.filter(b => b.ticker === ticker);\n      //console.log(buys_ticker);\n      var sells_ticker = sells.filter(s => s.ticker === ticker);\n      volumen_compra += buys_ticker.reduce(function(total, current){return total + current.volume},0);\n      //console.log(volumen_compra);\n      volumen_venta += sells_ticker.reduce(function(total, current){return total + current.volume},0);\n    };\n\n    volumen_total += (volumen_compra + volumen_venta);\n\n  };\n\n  var graphs = [];\n  for(var empresa in stocks)\n  {\n    var elem = stocks[empresa];\n    //console.log(elem);\n    var maximo_historico;\n    var minimo_historico;\n    var ultimo_valor;\n    var penultimo_valor;\n    var var_porcentual;\n    var prices = updates.filter(update => update.ticker === elem.ticker);\n    var valores_totales = prices.map(function(p){ return p.value } );\n    if(valores_totales.length !== 0)\n    {\n      maximo_historico = max(valores_totales);\n      minimo_historico = min(valores_totales);\n      ultimo_valor = valores_totales[valores_totales.length - 1];\n      if(valores_totales.length > 1)\n      {\n        penultimo_valor = valores_totales[valores_totales.length - 2];\n        var_porcentual = ultimo_valor/penultimo_valor*100;\n      }\n    }\n    //console.log(elem.ticker);\n    graphs.push(<div id={elem.company_name}>\n    <h2>Empresa: {elem.company_name}</h2>\n    <h3>Moneda: {elem.quote_base}</h3>\n    <h3>País: {elem.country}</h3>\n    <p>Valor máximo: {maximo_historico}</p>\n    <p>Valor mínimo: {minimo_historico}</p>\n    <p>Último precio: {ultimo_valor}</p>\n    <p>Variación porcentual: {var_porcentual}%</p>\n\n    <LineChart\n      width={500}\n      height={300}\n      data={prices}\n      margin={{\n        top: 5, right: 30, left: 20, bottom: 5,\n      }}\n    >\n      <CartesianGrid strokeDasharray=\"3 3\" />\n      <XAxis dataKey=\"time\" />\n      <YAxis label={elem.quote_base}/>\n      <Tooltip />\n      <Legend />\n      <Line type=\"monotone\" dataKey=\"value\" label=\"Valor acción\" stroke=\"#82ca9d\" />\n    </LineChart>\n    </div>);\n  };\n  return(\n    <div>\n      <h1>Precio acciones</h1>\n      {graphs}\n    </div>\n  );\n};\n\nReactDOM.render(<Stocks />, document.getElementById('root'));\n\n\n\n// function tick() {\n//   const element = (\n//     <div style={{ display: 'flex', maxWidth: 900 }}>\n//   <Chart\n//     width={400}\n//     height={300}\n//     chartType=\"ColumnChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['City', '2010 Population', '2000 Population'],\n//       ['New York City, NY', 8175000, 8008000],\n//       ['Los Angeles, CA', 3792000, 3694000],\n//       ['Chicago, IL', 2695000, 2896000],\n//       ['Houston, TX', 2099000, 1953000],\n//       ['Philadelphia, PA', 1526000, 1517000],\n//     ]}\n//     options={{\n//       title: 'Population of Largest U.S. Cities',\n//       chartArea: { width: '30%' },\n//       hAxis: {\n//         title: 'Total Population',\n//         minValue: 0,\n//       },\n//       vAxis: {\n//         title: 'City',\n//       },\n//     }}\n//     legendToggle\n//   />\n//   <Chart\n//     width={400}\n//     height={'300px'}\n//     chartType=\"AreaChart\"\n//     loader={<div>Loading Chart</div>}\n//     data={[\n//       ['Year', 'Sales', 'Expenses'],\n//       ['2013', 1000, 400],\n//       ['2014', 1170, 460],\n//       ['2015', 660, 1120],\n//       ['2016', 1030, 540],\n//     ]}\n//     options={{\n//       title: 'Company Performance',\n//       hAxis: { title: 'Year', titleTextStyle: { color: '#333' } },\n//       vAxis: { minValue: 0 },\n//       // For the legend to fit, we make the chart area smaller\n//       chartArea: { width: '50%', height: '70%' },\n//       // lineWidth: 25\n//     }}\n//   />\n// </div>\n//   );\n//   ReactDOM.render(element, document.getElementById('root'));\n// }\n//\n// setInterval(tick, 1000);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}